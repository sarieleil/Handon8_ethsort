class SinglyLinkedList:
    class Node:
        def __init__(self, key, next=None):
            self.key = key
            self.next = next

    def __init__(self, size=100):
        self.size = size
        self.nodes = [None] * size  
        self.head = -1  
        self.free = 0  

        for i in range(size - 1):
            self.nodes[i] = self.Node(None, i + 1)
        self.nodes[size - 1] = self.Node(None, -1)

    def allocate_node(self):
        if self.free == -1:
            raise MemoryError("Out of space")
        index = self.free
        self.free = self.nodes[self.free].next  
        return index

    def free_node(self, index):
        self.nodes[index].next = self.free
        self.free = index

    def insert(self, key):
        new_node = self.allocate_node()
        self.nodes[new_node].key = key
        self.nodes[new_node].next = self.head
        self.head = new_node

    def remove(self, key):
        prev, current = -1, self.head
        while current != -1 and self.nodes[current].key != key:
            prev, current = current, self.nodes[current].next

        if current == -1:
            return  

        if prev == -1:
            self.head = self.nodes[current].next
        else:
            self.nodes[prev].next = self.nodes[current].next

        self.free_node(current)

    def print_list(self):
        current = self.head
        while current != -1:
            print(self.nodes[current].key, end=" -> ")
            current = self.nodes[current].next
        print("NULL")

# Example usage:
sll = SinglyLinkedList()
sll.insert(10)
sll.insert(20)
sll.insert(30)
print("List after insertions:")
sll.print_list()
sll.remove(20)
print("List after deletion:")
sll.print_list()
